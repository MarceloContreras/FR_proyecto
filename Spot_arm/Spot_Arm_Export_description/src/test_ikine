#!/usr/bin/env python
import rospy
from sensor_msgs.msg import JointState

from markers import *
from proyfunctions import *

rospy.init_node("testInverseKinematics")
pub = rospy.Publisher('joint_states', JointState, queue_size=1)

bmarker = BallMarker(color['RED'])
bmarker_des = BallMarker(color['GREEN'])

# Joint names
jnames = ['Rev7', 'Rev8', 'Rev9', 'Rev10', 'Slider11', 'Rev14', 'Rev15']

# Desired position
xd = np.array([-0.011, -0.143, 0.886])
# Initial configuration
q0 = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# Inverse kinematics
q = ikine_Spot(xd, q0)

if (q[0] < -2.62 or q[0] > 3.14 or 
        q[1] < -0.52 or q[1] > 3.14 or
        q[2] < 0 or q[2] > 2.62 or
        q[3] < -4.36 or q[3] > 1.22 or
        q[4] < 0 or q[4] > 0.07 or
        q[5] < -1.05 or q[5] > 1.05 or
        q[6] < -4.45 or q[6] > 1.31):
    q = q0
    print("Punto deseado fuera de alcance.")

# Resulting position (end effector with respect to the base link)
T = fkine_Spot(q)
print('Obtained value:\n', np.round(T, 3))
# Red marker shows the achieved position
bmarker.xyz(T[0:3, 3])
# Green marker shows the desired position
bmarker_des.xyz(xd)

# Object (message) whose type is JointState
jstate = JointState()
# Set values to the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q

# Loop rate (in Hz)
rate = rospy.Rate(20)
# Continuous execution loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publish the message
    pub.publish(jstate)
    bmarker.publish()
    bmarker_des.publish()
    # Wait for the next iteration
    rate.sleep()
